# -*- coding: utf-8 -*-
"""ITF_Pyhton_Notes_12-13-14.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uFvYw-s34U8VBh54j-_O3fXw5klySnww
"""

number=[11,2,24,61,48,33,31]
odds = 0
evens = 0
for i in number:
  if not i % 2 :
    evens += 1
  else :
    odds +=1
print("The sum of odd numbers are :" , odds)    
print("The sum of evens numbers are :", evens)

toplam = 0
for i in range(1,75) :
  toplam += i 
print(toplam)

names = ["susan", "tom", "edward"]
mood = ["happy", "sad"]
for i in names:
  for ii in mood:
   print(i, "is", ii)

"""LİST COMPHRENSİON

>TEK SATIRDA YAZMA

> **for** item** in** iterable:

    expression

> [expression **for** item** in** iterable]









"""

listem=[]
for i in range(5):
  listem.append(i)
listem

[item for item in range(5)]

[ i**2  for i in range(5)]

"""Ternary If Statements

if_body **if** condition **else** else_body
"""

condition = True
1 if condition else 0

print(1 if False else 0)

listem = [1,2,3,4,5,6]
[i**2 for i in listem if i % 2]

generate = (i**2 for i in range(6))
generate

print(*generate)

generate

list(generate)

list(generate)

print(next(generate))

print(*generate)

"""## AMSTRONG NUMBER"""

while True :
  number = input("enter a positive integer number:")
  digits = len(number)
  summ = 0
  if not number.isdigit():
    print(number, "is invalid entry. Enter valid input.!")

  elif int(number) >= 0:
    for i in range(digits) :
      summ = summ + int(number[i])** digits
    
    if summ == int(number) :
      print(number, "is an Amstrong Number.")
      break
    else:
      print(number, "is not an Amstrong Number.Sorry.")
      break

"""# PRİME NUMBER"""

n = int(input("Enter a positive number to check if is is a Prime Number : "))
count = 0
for i in range(1, n+1):
  if n % i == 0 :
    count += 1
if (n == 0) or (n == 1) or (count >= 3) :
  print(n, "is not a Prime Number.")
else :
  print(n, "is Prime Number.")

"""## FUNCTİONS"""

def add(a,b):
  print(a+b)
add(3,5)

def calculator(a,b,c):
    if c == "+":
      print(a + b)
    elif c== "-":
      print(a-b)
    elif c== "*":
      print(a*b)
    else :
      print(a/b)


calculator(3,5,"+")

a = "i"
b = "love"
c = "you"

def texter(text1, text2, text3):
  print(text2, text3, text1)
texter(c,a,b)

def parrot(voltage, state='a stiff', action='voom', type='Norwegian Blue'):
    print("-- This parrot wouldn't", action, end=' ')
    print("if you put", voltage, "volts through it.")
    print("-- Lovely plumage, the", type)
    print("-- It's", state, "!")

parrot(1000)

parrot(voltage=1000, action = "VOOOOOM")

parrot("a million", "bereft of life", "jump")

parrot("a thousand", state = "pushing up the daises", )

"""#if we mix kwargs first an positional last order."""

parrot(state="pushing up daises", "a thausand")

def argu(a, b = "earth", c, d = "saturn" ):
  print(a,b,c,d, sep = "\n")

def argu(a, c, b = "earth", d = "saturn" ):
  print(a,b,c,d, sep = "\n")

argu("uranus" , "jupiter")

argu("pluto", c = "venus", "mars")

argu("pluto",  "mars", c = "venus")

argu(d= "sun", a="pluto",  b="mars", c = "venus")

argu("sun", "pluto", "mars", "venus")

def slicer(*num):
  odds =[]
  evens=[]

  for i in num:
    if i % 2 == 0 :
      evens.append(i)
    else:
      odds.append(i)

  print("even list: ", evens)
  print("odd list :", odds)
slicer(2,3,8,4,6,7,11,9,9)

def organizer(**family):
  names = list()
  ages = list()
  for key,value in family.items():
    names.append(key)
    ages.append(value)
  print(names, ages, sep = "\n")

organizer(adem=37, hacer=33)

def brothers(bro1, bro2, bro3):
  print("Here are the names of brothers : ")
  print(bro1, bro2, bro3,  sep = "\n")

brothers("tom", "sue", "tim")

bros = ["tom", "sue", "tim"]
brothers(*bros)

a= "Gedsonu alırsa Şampiyon Galatasaray"


def voweler(letter):
  vowels=["a", "e","ı","i","o","ö","u","ü"]

  if letter.lower() in vowels:
    return True
  else:
    return False
filtered_vowels=filter(voweler, a)
list(filtered_vowels)

def gene(x="solomon", y="david"):
  print(x, "ne haber baba")
  print(y, "iyidir oğlum")
dict_gene={"x" : "Marry", "y" : "Fred"}
gene(**dict_gene)

def gene(x,y):
  print(x, "ne haber baba")
  print(y, "iyidir oğlum")
gene(**dict_gene)

dict_couple = {"bride" : ["marry", "bella", "linda", "emma"],
               "groom" : ["jack", "robert", "eric", "adam"]}

def marriage(bride,groom):
  couple_list = []
  for x in zip(bride,groom):
    couple_list.append(x)
  return couple_list

marriage(** dict_couple)

def marriage_2(bride, groom):
  return([x for x in zip(bride,groom)])
marriage_2(** dict_couple)